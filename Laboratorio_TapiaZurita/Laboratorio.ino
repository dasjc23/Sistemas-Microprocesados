//            Universidad Técnica del Norte
//                        FICA
//                       CIERCOM
//             Sistemas Análogos Digitales
//                       
//
//   Juan Carlos Tapia
//   Paul Zurita        


/* double vector[640]=
{0,0.0010593,0.0021186,0.003178,0.0042373,0.0052966,0.0063559,0.0074153,0.0084746,0.045198,
0.081921,0.11864,0.15537,0.19209,0.22881,0.26554,0.30226,0.33898,0.30226,0.26554,0.22881,
0.19209,0.15537,0.11864,0.081921,0.045198,0.0084746,0.0077684,0.0070621,0.0063559,0.0056497,
0.0049435,0.0042373,0.0035311,0.0028249,0.0021186,0.0014124,0.00070621,0,-0.096045,-0.19209,
-0.28814,-0.073446,0.14124,0.35593,0.57062,0.78531,1,0.73729,0.47458,0.21186,-0.050847,-0.31356,
-0.57627,-0.83898,-0.55932,-0.27966,0,0.00073692,0.0014738,0.0022108,0.0029477,0.0036846,0.0044215,
0.0051584,0.0058954,0.0066323,0.0073692,0.0081061,0.008843,0.00958,0.010317,0.011054,0.011791,0.012528,
0.013265,0.014001,0.014738,0.015475,0.016212,0.016949,0.03484,0.052731,0.070621,0.088512,0.1064,0.12429,
0.14218,0.16008,0.17797,0.16186,0.14576,0.12966,0.11356,0.097458,0.081356,0.065254,0.049153,0.033051,0.016949,
0.013559,0.010169,0.0067797,0.0033898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0010593,0.0021186,
0.003178,0.0042373,0.0052966,0.0063559,0.0074153,0.0084746,0.045198,0.081921,0.11864,0.15537,0.19209,0.22881,
0.26554,0.30226,0.33898,0.30226,0.26554,0.22881,0.19209,0.15537,0.11864,0.081921,0.045198,0.0084746,0.0077684,
0.0070621,0.0063559,0.0056497,0.0049435,0.0042373,0.0035311,0.0028249,0.0021186,0.0014124,0.00070621,0,-0.096045,
-0.19209,-0.28814,-0.073446,0.14124,0.35593,0.57062,0.78531,1,0.73729,0.47458,0.21186,-0.050847,-0.31356,-0.57627,
-0.83898,-0.55932,-0.27966,0,0.00073692,0.0014738,0.0022108,0.0029477,0.0036846,0.0044215,0.0051584,0.0058954,
0.0066323,0.0073692,0.0081061,0.008843,0.00958,0.010317,0.011054,0.011791,0.012528,0.013265,0.014001,0.014738,
0.015475,0.016212,0.016949,0.03484,0.052731,0.070621,0.088512,0.1064,0.12429,0.14218,0.16008,0.17797,0.16186,
0.14576,0.12966,0.11356,0.097458,0.081356,0.065254,0.049153,0.033051,0.016949,0.013559,0.010169,0.0067797,
0.0033898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0010593,0.0021186,0.003178,0.0042373,0.0052966,
0.0063559,0.0074153,0.0084746,0.045198,0.081921,0.11864,0.15537,0.19209,0.22881,0.26554,0.30226,0.33898,
0.30226,0.26554,0.22881,0.19209,0.15537,0.11864,0.081921,0.045198,0.0084746,0.0077684,0.0070621,0.0063559,
0.0056497,0.0049435,0.0042373,0.0035311,0.0028249,0.0021186,0.0014124,0.00070621,0,-0.096045,-0.19209,
-0.28814,-0.073446,0.14124,0.35593,0.57062,0.78531,1,0.73729,0.47458,0.21186,-0.050847,-0.31356,
-0.57627,-0.83898,-0.55932,-0.27966,0,0.00073692,0.0014738,0.0022108,0.0029477,0.0036846,
0.0044215,0.0051584,0.0058954,0.0066323,0.0073692,0.0081061,0.008843,0.00958,0.010317,
0.011054,0.011791,0.012528,0.013265,0.014001,0.014738,0.015475,0.016212,0.016949,0.03484,
0.052731,0.070621,0.088512,0.1064,0.12429,0.14218,0.16008,0.17797,0.16186,0.14576,0.12966,
0.11356,0.097458,0.081356,0.065254,0.049153,0.033051,0.016949,0.013559,0.010169,0.0067797,
0.0033898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0010593,0.0021186,0.003178,
0.0042373,0.0052966,0.0063559,0.0074153,0.0084746,0.045198,0.081921,0.11864,0.15537,0.19209,
0.22881,0.26554,0.30226,0.33898,0.30226,0.26554,0.22881,0.19209,0.15537,0.11864,0.081921,
0.045198,0.0084746,0.0077684,0.0070621,0.0063559,0.0056497,0.0049435,0.0042373,0.0035311,
0.0028249,0.0021186,0.0014124,0.00070621,0,-0.096045,-0.19209,-0.28814,-0.073446,0.14124,
0.35593,0.57062,0.78531,1,0.73729,0.47458,0.21186,-0.050847,-0.31356,-0.57627,-0.83898,-0.55932,
-0.27966,0,0.00073692,0.0014738,0.0022108,0.0029477,0.0036846,0.0044215,0.0051584,0.0058954,
0.0066323,0.0073692,0.0081061,0.008843,0.00958,0.010317,0.011054,0.011791,0.012528,0.013265,
0.014001,0.014738,0.015475,0.016212,0.016949,0.03484,0.052731,0.070621,0.088512,0.1064,0.12429,
0.14218,0.16008,0.17797,0.16186,0.14576,0.12966,0.11356,0.097458,0.081356,0.065254,0.049153,0.033051,
0.016949,0.013559,0.010169,0.0067797,0.0033898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0010593,
0.0021186,0.003178,0.0042373,0.0052966,0.0063559,0.0074153,0.0084746,0.045198,0.081921,0.11864,0.15537,0.19209,
0.22881,0.26554,0.30226,0.33898,0.30226,0.26554,0.22881,0.19209,0.15537,0.11864,0.081921,0.045198,0.0084746,
0.0077684,0.0070621,0.0063559,0.0056497,0.0049435,0.0042373,0.0035311,0.0028249,0.0021186,0.0014124,0.00070621,
0,-0.096045,-0.19209,-0.28814,-0.073446,0.14124,0.35593,0.57062,0.78531,1,0.73729,0.47458,0.21186,-0.050847,
-0.31356,-0.57627,-0.83898,-0.55932,-0.27966,0,0.00073692,0.0014738,0.0022108,0.0029477,0.0036846,0.0044215,
0.0051584,0.0058954,0.0066323,0.0073692,0.0081061,0.008843,0.00958,0.010317,0.011054,0.011791,0.012528,0.013265,
0.014001,0.014738,0.015475,0.016212,0.016949,0.03484,0.052731,0.070621,0.088512,0.1064,0.12429,0.14218,0.16008,
0.17797,0.16186,0.14576,0.12966,0.11356,0.097458,0.081356,0.065254,0.049153,0.033051,0.016949,0.013559,0.010169,
0.0067797,0.0033898,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};  */

// double vector[29]={0,0,0,0,0,  10, 17, 25, 26, 31, 34, 33, 34, 37, 36, 38, 38, 36, 37, 38, 38, 39, 39, 37, 39, 38, 38, 39, 37, 38, 40, 37, 39, 38, 38, 46, 31, 199,  205,  217,  334,  408,  552,  628,  683,  693,  749,  832,  734,  657,  600,  542,  510,  470,  437,  415,  392,  376,  354,  339,  329,  316,  307,  294,  285,  287,  292,  291,  284,  282,  289,  298,  310,  318,  326,  345,  356,  367,  366,  366,  355,  330,  306,  277,  261,  253,  247,  251,  248,  267,  309,  330,  317,  304,  292,  280,  269,  264,  249,  242,  233,  233,  240,  244,  247,  263,  269,  286,  276,  237,  239,  234,  229,  209,  188,  162,  115,  71, 28, 0,  0,  0,  0,  0,  0,  0,  0,  0,  16, 83, 168,  262,  365,  428,  500,  555,  587,  603,  596,  586,  576,  557,  541,  510,  489,  466,  462,  449,  427,  410,  382,  339,  305,  260,  216,  177,  141,  116,  90, 88, 94, 98, 109,  113,  127,  148,  178,  203,  177,  173,  169,  160,  160,  139,  134,  141,  146,  147,  143,  144,  150,  115,  94, 68, 64, 56, 45, 38, 22, 9,  8,  0,  0,  0,  0,  0,  0,  0,  10, 19, 25, 27, 31, 31, 35, 35, 36, 38, 36, 37, 37, 37, 37, 37, 38, 38, 52, 128,  205,  282,  351,  408,  460,  490,  514,  524,  515,  492,  450,  406,  366,  318,  288,  246,  217,  208,  186,  176,  152,  135,  122,  99, 83, 68, 58, 60, 58, 67, 69, 86, 105,  115,  124,  129,  134,  140,  117,  115,  105,  92, 82, 63, 39, 7,  0,  0,  0,  0,  0,  0,  0,  0,  7,  17, 24, 28, 33, 32, 36, 36, 36, 38, 38, 38, 38, 37, 37, 38, 37, 38, 38, 40, 39, 36, 38, 39, 38, 39, 39, 39, 39, 39, 40, 38, 39, 39, 35, 38, 38, 39, 40, 36, 40, 101,  230,  347,  432,  484,  518,  543,  561,  561,  556,  540,  520,  499,  469,  434,  395,  360,  332,  303,  280,  255,  241,  234,  196,  180,  162,  151,  146,  134,  126,  106,  89, 78, 59, 45, 28, 20, 13, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  16, 22, 27, 31, 32, 34, 35, 36, 37, 37, 38, 38, 37, 38, 39, 40, 37, 38, 39, 37, 40, 38, 38, 39, 38, 38, 38, 38, 40, 38, 37, 39, 38, 38, 40, 39, 39, 39, 40, 38, 39, 40, 134,  223,  308,  382,  437,  490,  530,  548,  553,  515,  503,  482,  452,  420,  387,  342,  327,  302,  280,  255,  236,  217,  191,  169,  146,  131,  125,  116,  113,  113,  120,  130,  131,  129,  123,  119,  118,  111,  104,  91, 77, 69, 49, 42, 34, 28, 25, 10, 0,  0,  0,  0,  0,  0,  0,  0,  6,  14, 22, 27, 30, 34, 35, 36, 36, 36, 38, 36, 38, 38, 38, 39, 37, 39, 38, 38, 38, 38, 39, 38, 38, 39, 39, 39, 39, 38, 39, 104,  183,  250,  313,  367,  398,  417,  421,  423}


//      Variables Desviación Estándar

int cont=0;
double prom;
double dse=0;
double dsetotal=0;

//      Variables Convolución, Sumas y diferencias acumulativas y Transformada de Fourier

#define ARM_MATH_CM3 //LIBRERIA MATH DEL DUE
#include <arm_math.h>
#define tam_sig 320
extern float_32_t InputSignal_1kHz_15kHz[tam_sign];

float32_t REX [tam_sig/2];
float32_t IDX [tam_sig/2];
float32_t outSign[tam_sig/2];


void setup(){
Serial.begin(9600);

}

void loop() {
/*
                                    Desviación Estándar

for(; cont<vector.length(); cont++){
prom=prom+vector[cont];
}
prom=prom/10;
Serial.println(prom);

cont=0;
for(;cont<vector.length();cont++){
  dse=dse+pow(vector[cont]-prom,2);    //pow(valor,potencia)
}
dse=dse/9;
dsetotal=sqrt(dse);
Serial.println(dsetotal);
*/



/*                           Convolución                                               
plot_sig(); 
*/



/*                Sumas y diferencias acumulativas
running_sum(&InputSignal_1kHz_15kHz[0],&outSign[0],tam_sig);
*/


/*                  Transformada de Fourier
cal_tdf(&InputSignal_1kHz_15kHz[0],&REX[0],&IDX[0],tam_sig);
get_tdf(); 
plotsign();                  
 */

}

/*                                      Convolución 

void plot_sig(){
  uint32_t i;
  for (i=0; i<tam_sig;i++){
    Serial.print(InputSignal_1kHz_15kHz[i]);
    Serial.print(,);
    Serial.println(outSign[i])
    delay(10);
      }
  }
*/ 


/*                                        Suma Acumulativa
                                        
void running_sum(float32_t *input,float32_t *output,uint32_t tam){
  uint32_t i;
  for(i=0;i<tam;i++){
  output[i]= input[i]+[i-1];
  }
}
*/

/*                                   Diferencia Acumulativa
                                     
void running_subs (float32_t *input,float32_t *output,uint32_t tam){
  uint32_t i;
  for(i=0;i<tam;i++){
  output[i]= input[i]-[i-1];
  }
}
*/   



/*                                    Transformada de Fourier
 *                                    
 *                                   
void cal_tdf(float32_t *inputsig, float32_t sigrex, float32_t *sigidx, uint32_t tam){
  uint32_t i,j,k;
  for(j=0;j<tam/2;j++){
    sigrex[j]=0;
    sigrex[j]=0;  
  }
  for(k=0;k<tam/2;k++){//almacenar idx y rex
    for(i=0;i<tam;i++){
      sigrex[k]=(sigrex[k]+inputsig[i])*cos(2*PI*k*i/tam);
      sigidx[k]=(sigidx[k]-inputsig[i])*sin(2*PI*k*i/tam);
    }}}


void get_tdf(void){
  uint32_t i;
  for(i=0;i<tam_sig/2;i++){
    outSign[i]=sqrt(pow(REX[i],2)+pow(IDX[i],2));   
  }}


void plotsign(){
  uint32_t i;
  for(i=0;i<tam_sig/2;i++){
    Serial.println(outSign[i];
    delay(10);   
  }}
                                  
 */


                          
